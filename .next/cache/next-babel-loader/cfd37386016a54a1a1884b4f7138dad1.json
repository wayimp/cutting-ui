{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\nvar initialState = {\n  lang: 'enUS',\n  segment: 'reports',\n  psegments: [],\n  psegmentsFetched: false,\n  bvendors: [],\n  bvendorsFetched: false,\n  token: {}\n}; // create your reducer\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'TOKEN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        token: action.payload\n      });\n\n    case 'LANG':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lang: action.payload\n      });\n\n    case 'SEGMENT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        segment: action.payload\n      });\n\n    case 'BVENDORS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bvendorsFetched: true,\n        bvendors: action.payload\n      });\n\n    case 'PSEGMENTS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        psegmentsFetched: true,\n        psegments: action.payload\n      });\n\n    default:\n      return state;\n  }\n}; // create a makeStore function\n\n\nvar makeStore = function makeStore(context) {\n  return createStore(reducer);\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/keith/cutting-ui/components/store.js"],"names":["createStore","createWrapper","HYDRATE","initialState","lang","segment","psegments","psegmentsFetched","bvendors","bvendorsFetched","token","reducer","state","action","type","payload","makeStore","context","wrapper","debug"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,MADa;AAEnBC,EAAAA,OAAO,EAAE,SAFU;AAGnBC,EAAAA,SAAS,EAAE,EAHQ;AAInBC,EAAAA,gBAAgB,EAAE,KAJC;AAKnBC,EAAAA,QAAQ,EAAE,EALS;AAMnBC,EAAAA,eAAe,EAAE,KANE;AAOnBC,EAAAA,KAAK,EAAE;AAPY,CAArB,C,CASA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBT,YAAyB;AAAA,MAAXU,MAAW;;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,6CAAYF,KAAZ;AAAmBF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAAjC;;AACF,SAAK,MAAL;AACE,6CAAYH,KAAZ;AAAmBR,QAAAA,IAAI,EAAES,MAAM,CAACE;AAAhC;;AACF,SAAK,SAAL;AACE,6CAAYH,KAAZ;AAAmBP,QAAAA,OAAO,EAAEQ,MAAM,CAACE;AAAnC;;AACF,SAAK,UAAL;AACE,6CAAYH,KAAZ;AAAmBH,QAAAA,eAAe,EAAE,IAApC;AAA0CD,QAAAA,QAAQ,EAAEK,MAAM,CAACE;AAA3D;;AACF,SAAK,WAAL;AACE,6CAAYH,KAAZ;AAAmBL,QAAAA,gBAAgB,EAAE,IAArC;AAA2CD,QAAAA,SAAS,EAAEO,MAAM,CAACE;AAA7D;;AACF;AACE,aAAOH,KAAP;AAZJ;AAcD,CAfD,C,CAiBA;;;AACA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAAAC,OAAO;AAAA,SAAIjB,WAAW,CAACW,OAAD,CAAf;AAAA,CAAzB,C,CAEA;;;AACA,OAAO,IAAMO,OAAO,GAAGjB,aAAa,CAACe,SAAD,EAAY;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore } from 'redux'\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper'\n\nconst initialState = {\n  lang: 'enUS',\n  segment: 'reports',\n  psegments: [],\n  psegmentsFetched: false,\n  bvendors: [],\n  bvendorsFetched: false,\n  token: {}\n}\n// create your reducer\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'TOKEN':\n      return { ...state, token: action.payload }\n    case 'LANG':\n      return { ...state, lang: action.payload }\n    case 'SEGMENT':\n      return { ...state, segment: action.payload }\n    case 'BVENDORS':\n      return { ...state, bvendorsFetched: true, bvendors: action.payload }\n    case 'PSEGMENTS':\n      return { ...state, psegmentsFetched: true, psegments: action.payload }\n    default:\n      return state\n  }\n}\n\n// create a makeStore function\nconst makeStore = context => createStore(reducer)\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(makeStore, { debug: true })\n"]},"metadata":{},"sourceType":"module"}