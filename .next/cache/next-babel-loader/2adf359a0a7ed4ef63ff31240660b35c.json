{"ast":null,"code":"var _jsxFileName = \"/Users/keith/cutting-ui/pages/report/[id].js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport axiosClient from '../../src/axiosClient';\nimport { useSnackbar } from 'notistack';\nimport { connect } from 'react-redux';\nimport { flatten } from 'lodash';\nimport { fade, makeStyles, useTheme } from '@material-ui/core/styles';\nimport Link from '../../src/Link';\nimport TopBar from '../../components/TopBar';\nimport numeral from 'numeral';\nconst priceFormat = '$0.00';\nimport moment from 'moment-timezone';\nconst dateFormat = 'YYYY-MM-DDTHH:mm:SS';\nconst dateDisplay = 'dddd MMM DD hh:mm a';\nimport { Container, Grid, Checkbox, Typography, TextField, List, ListItem, ListItemAvatar, ListItemText, Table, TableBody, TableCell, TableRow, Button } from '@material-ui/core';\n/*\nimport {\n  Timeline,\n  TimelineItem,\n  TimelineSeparator,\n  TimelineConnector,\n  TimelineContent,\n  TimelineDot,\n  TimelineOppositeContent\n} from '@material-ui/lab'\n*/\n\nimport { getLangString } from '../../components/Lang';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nconst useStyles = makeStyles(theme => ({\n  toolbar: _objectSpread({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1)\n  }, theme.mixins.toolbar),\n  formGroup: {\n    margin: 20,\n    padding: 20,\n    backgroundColor: '#fafafa',\n    border: '1px solid #ccc'\n  },\n  center: {\n    textAlign: 'center'\n  },\n  content: {\n    textAlign: 'center',\n    flexGrow: 1,\n    padding: theme.spacing(7)\n  },\n  root: {\n    flexGrow: 1\n  },\n  center: {\n    textAlign: 'center',\n    flexGrow: 1\n  },\n  lines: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    flexGrow: 1,\n    borderTop: '1px solid #ccc',\n    borderLeft: '1px solid #ccc',\n    borderRight: '1px solid #ccc',\n    '&:last-child': {\n      reportBottom: '1px solid #ccc'\n    }\n  },\n  nolines: {\n    reportBottom: '2px solid white'\n  },\n  flexGrid: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    flexGrow: 1\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n\nconst Report = ({\n  propsReport,\n  dispatch,\n  lang\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [report, setReport] = React.useState(propsReport);\n  const langSuffix = lang ? lang.substring(0, 2) : 'en';\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  useEffect(() => {\n    document.title = report.customerName;\n  });\n\n  const updateReport = async updateReport => {\n    await axiosClient.patch('/reports', updateReport).then(res => {\n      enqueueSnackbar(getLangString('report.updated', lang), {\n        variant: 'success'\n      });\n      setReport(updateReport);\n    }).catch(err => {\n      enqueueSnackbar(getLangString('report.updateError', lang), {\n        variant: 'error'\n      });\n    });\n  };\n\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, __jsx(TopBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: classes.toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }), __jsx(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    spacing: 2,\n    justify: \"space-between\",\n    className: classes.formGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    className: classes.textField,\n    variant: \"outlined\",\n    id: \"customerName\",\n    label: \"Customer Name\",\n    value: report && report.customerName ? report.customerName : '',\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  })), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    className: classes.textField,\n    variant: \"outlined\",\n    id: \"customerStreet\",\n    label: \"Street Address\",\n    value: report && report.customerStreet ? report.customerStreet : '',\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  })), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    className: classes.textField,\n    variant: \"outlined\",\n    id: \"customerCity\",\n    label: \"City\",\n    value: report && report.customerCity ? report.customerCity : '',\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  })), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    className: classes.textField,\n    variant: \"outlined\",\n    id: \"customerState\",\n    label: \"State\",\n    value: report && report.customerState ? report.customerState : '',\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  })), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    className: classes.textField,\n    variant: \"outlined\",\n    id: \"customerZip\",\n    label: \"Zip\",\n    value: report && report.customerZip ? report.customerZip : '',\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  })), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    className: classes.textField,\n    variant: \"outlined\",\n    id: \"customerPhone\",\n    label: \"Phone\",\n    value: report && report.customerPhone ? report.customerPhone : '',\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport async function getServerSideProps(context) {\n  const {\n    id\n  } = context.params;\n  const propsReport = await axiosClient.get('/reports/' + id).then(response => response.data);\n  return {\n    props: {\n      propsReport\n    }\n  };\n}\nexport default connect(state => state)(Report);","map":{"version":3,"sources":["/Users/keith/cutting-ui/pages/report/[id].js"],"names":["React","useState","useEffect","axiosClient","useSnackbar","connect","flatten","fade","makeStyles","useTheme","Link","TopBar","numeral","priceFormat","moment","dateFormat","dateDisplay","Container","Grid","Checkbox","Typography","TextField","List","ListItem","ListItemAvatar","ListItemText","Table","TableBody","TableCell","TableRow","Button","getLangString","CancelIcon","CheckCircleIcon","useStyles","theme","toolbar","display","alignItems","justifyContent","padding","spacing","mixins","formGroup","margin","backgroundColor","border","center","textAlign","content","flexGrow","root","lines","borderTop","borderLeft","borderRight","reportBottom","nolines","flexGrid","modal","button","Report","propsReport","dispatch","lang","classes","report","setReport","langSuffix","substring","enqueueSnackbar","document","title","customerName","updateReport","patch","then","res","variant","catch","err","textField","customerStreet","customerCity","customerState","customerZip","customerPhone","getServerSideProps","context","id","params","get","response","data","props","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axiosClient from '../../src/axiosClient'\nimport { useSnackbar } from 'notistack'\nimport { connect } from 'react-redux'\nimport { flatten } from 'lodash'\nimport { fade, makeStyles, useTheme } from '@material-ui/core/styles'\nimport Link from '../../src/Link'\nimport TopBar from '../../components/TopBar'\nimport numeral from 'numeral'\nconst priceFormat = '$0.00'\nimport moment from 'moment-timezone'\nconst dateFormat = 'YYYY-MM-DDTHH:mm:SS'\nconst dateDisplay = 'dddd MMM DD hh:mm a'\nimport {\n  Container,\n  Grid,\n  Checkbox,\n  Typography,\n  TextField,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  Button\n} from '@material-ui/core'\n/*\nimport {\n  Timeline,\n  TimelineItem,\n  TimelineSeparator,\n  TimelineConnector,\n  TimelineContent,\n  TimelineDot,\n  TimelineOppositeContent\n} from '@material-ui/lab'\n*/\nimport { getLangString } from '../../components/Lang'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\n\nconst useStyles = makeStyles(theme => ({\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar\n  },\n  formGroup: {\n    margin: 20,\n    padding: 20,\n    backgroundColor: '#fafafa',\n    border: '1px solid #ccc'\n  },\n  center: {\n    textAlign: 'center'\n  },\n  content: {\n    textAlign: 'center',\n    flexGrow: 1,\n    padding: theme.spacing(7)\n  },\n  root: {\n    flexGrow: 1\n  },\n  center: {\n    textAlign: 'center',\n    flexGrow: 1\n  },\n  lines: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    flexGrow: 1,\n    borderTop: '1px solid #ccc',\n    borderLeft: '1px solid #ccc',\n    borderRight: '1px solid #ccc',\n    '&:last-child': {\n      reportBottom: '1px solid #ccc'\n    }\n  },\n  nolines: {\n    reportBottom: '2px solid white'\n  },\n  flexGrid: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    flexGrow: 1\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    margin: theme.spacing(1)\n  }\n}))\n\nconst Report = ({ propsReport, dispatch, lang }) => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const [report, setReport] = React.useState(propsReport)\n  const langSuffix = lang ? lang.substring(0, 2) : 'en'\n  const { enqueueSnackbar } = useSnackbar()\n\n  useEffect(() => {\n    document.title = report.customerName\n  })\n\n  const updateReport = async updateReport => {\n    await axiosClient\n      .patch('/reports', updateReport)\n      .then(res => {\n        enqueueSnackbar(getLangString('report.updated', lang), {\n          variant: 'success'\n        })\n        setReport(updateReport)\n      })\n      .catch(err => {\n        enqueueSnackbar(getLangString('report.updateError', lang), {\n          variant: 'error'\n        })\n      })\n  }\n\n  return (\n    <Container>\n      <TopBar />\n      <div className={classes.content}>\n        <div className={classes.toolbar} />\n        <Grid\n          item\n          container\n          xs={12}\n          spacing={2}\n          justify='space-between'\n          className={classes.formGroup}\n        >\n          <Grid item>\n            <TextField\n              className={classes.textField}\n              variant='outlined'\n              id='customerName'\n              label='Customer Name'\n              value={report && report.customerName ? report.customerName : ''}\n              readOnly\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              className={classes.textField}\n              variant='outlined'\n              id='customerStreet'\n              label='Street Address'\n              value={\n                report && report.customerStreet ? report.customerStreet : ''\n              }\n              readOnly\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              className={classes.textField}\n              variant='outlined'\n              id='customerCity'\n              label='City'\n              value={report && report.customerCity ? report.customerCity : ''}\n              readOnly\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              className={classes.textField}\n              variant='outlined'\n              id='customerState'\n              label='State'\n              value={report && report.customerState ? report.customerState : ''}\n              readOnly\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              className={classes.textField}\n              variant='outlined'\n              id='customerZip'\n              label='Zip'\n              value={report && report.customerZip ? report.customerZip : ''}\n              readOnly\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              className={classes.textField}\n              variant='outlined'\n              id='customerPhone'\n              label='Phone'\n              value={report && report.customerPhone ? report.customerPhone : ''}\n              readOnly\n            />\n          </Grid>\n        </Grid>\n\n        {/*\n        <Grid item container xs={12} spacing={2} justify='flex-end'>\n          <Grid item>\n            <Timeline>\n              {report.timeline.map((timestamp, index) => (\n                <TimelineItem key={index}>\n                  <TimelineSeparator>\n                    <TimelineDot />\n                    {index < report.timeline.length - 1 ? (\n                      <TimelineConnector />\n                    ) : (\n                      ''\n                    )}\n                  </TimelineSeparator>\n                  <TimelineContent>\n                    <Typography>\n                      {timestamp[`description_${langSuffix}`]}<p/>\n                      {moment(timestamp.timestamp, dateFormat)\n                        .locale(lang.substring(0, 2))\n                        .format(dateDisplay)}\n                    </Typography>\n                  </TimelineContent>\n                </TimelineItem>\n              ))}\n            </Timeline>\n          </Grid>\n          {report.timeline.length <= 1 ? (\n            <Grid item>\n              <Button\n                onClick={reportDelivered}\n                variant='contained'\n                color='primary'\n                className={classes.button}\n                startIcon={<CheckCircleIcon />}\n              >\n                {getLangString('report.delivered', lang)}\n              </Button>\n              <Button\n                onClick={reportCancelled}\n                variant='contained'\n                color='secondary'\n                className={classes.button}\n                startIcon={<CancelIcon />}\n              >\n                {getLangString('report.cancelled', lang)}\n              </Button>\n            </Grid>\n          ) : (\n            ''\n          )}\n        </Grid>\n        */}\n      </div>\n    </Container>\n  )\n}\n\nexport async function getServerSideProps (context) {\n  const { id } = context.params\n  const propsReport = await axiosClient\n    .get('/reports/' + id)\n    .then(response => response.data)\n\n  return {\n    props: {\n      propsReport\n    }\n  }\n}\n\nexport default connect(state => state)(Report)\n"]},"metadata":{},"sourceType":"module"}